<div class="wizard-content" style="max-width: @GetMaxWidth();">
    <header class="wizard-header">
        <h1 class="wizard-title">
            @Title
        </h1>
        <p class="wizard-subheading">
            @SubTitle
        </p>
        <div class="wizard-steps">
            <nav class="steps">
                @foreach (var step in _steps)
                {
                    <div class="step @(step.IsCompleted ? "completed" : "")">
                        <div class="step-content">
                            @if (_steps.First() == step)
                            {
                                <div class="lines">
                                    <div class="line background" style="left: -50%; transform: scaleX(1);"></div>
                                    <div class="line progress" style="left: -50%; transform: scaleX(1);"></div>
                                </div>
                            }

                            <p class="step-number"><i class="@step.IconClass"></i></p>
                            <svg class="checkmark" viewBox="0 0 52 52">
                                <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none" />
                                <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                            </svg>

                            <div class="lines">
                                <div class="line background"></div>
                                <div class="line progress"></div>
                            </div>
                        </div>
                    </div>
                }
            </nav>
        </div>
    </header>

    <div class="panels" style="height: @GetHeight();">
        @foreach (var panel in _steps)
        {
            <div class="panel @(panel.IsActive && !panel.IsCompleted ? "moving-in" : panel.MovementClass)">
                @panel.ChildContent
            </div>
        }
        <div class="panel @(_steps.All(x => x.IsCompleted) ? "moving-in" : "moving-out-forward")">
            @Completed
        </div>
    </div>

    <div class="wizard-footer">
        <button class="button previous"
                disabled="@(_currentStep < 1 || _steps[_currentStep].EnablePrevious is false)"
                @onclick="Previous">
            Previous
        </button>
        <button class="button next"
                disabled="@(_isLoading || _steps.All(x => x.IsCompleted))"
                @onclick="Next">
            @_nextButtonText
        </button>
    </div>
</div>

<CascadingValue Value="this">
    @Steps
</CascadingValue>

@code {

    [Parameter, EditorRequired]
    public required RenderFragment Steps { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment Completed { get; set; }

    [Parameter, EditorRequired]
    public required string Title { get; set; }

    [Parameter, EditorRequired]
    public required string SubTitle { get; set; }

    [Parameter]
    public string? Height { get; set; }

    [Parameter]
    public string? MaxWidth { get; set; }

    private int _currentStep = 0;
    private string _nextButtonText => _isLoading ? "Loading..." : _currentStep == _steps.Count - 1 ? "Finalize" : "Next";
    private List<WizardStep> _steps { get; set; } = new();
    private bool _isLoading;

    private string GetHeight() => string.IsNullOrEmpty(Height) ? "auto" : Height;

    private string GetMaxWidth() => string.IsNullOrEmpty(MaxWidth) ? "auto" : MaxWidth;

    public void AddStep(WizardStep step)
    {
        _steps.Add(step);
        UpdateSteps();
        StateHasChanged();
    }

    private async Task Next()
    {
        var onNext = _steps[_currentStep].OnNext;
        if (onNext is not null)
        {
            _isLoading = true;
            var success = await onNext.Invoke();
            _isLoading = false;
            if (success is false)
            {
                return;
            }
        }
        _steps[_currentStep].IsCompleted = true;
        if (_currentStep < _steps.Count - 1)
        {
            _currentStep++;
        }
        UpdateSteps();
    }

    private void Previous()
    {
        if (_currentStep > 0)
        {
            _currentStep--;
            _steps[_currentStep].IsCompleted = false;
            UpdateSteps();
        }
    }

    private void UpdateSteps()
    {
        for (int i = 0; i < _steps.Count; i++)
        {
            _steps[i].IsActive = i == _currentStep;
            _steps[i].MovementClass = i <= _currentStep ? "moving-out-backward" : i > _currentStep ? "moving-out-forward" : null;
        }
    }

    protected override void OnInitialized()
    {
        UpdateSteps();
    }
}
