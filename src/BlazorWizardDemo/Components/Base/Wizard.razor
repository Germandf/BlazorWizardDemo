@inject IJSRuntime JS

<div class="wizard-content" style="max-width: @GetMaxWidth();">
    <div class="wizard-header">
        <h1 class="wizard-title">
            @Title
        </h1>
        <p class="wizard-subheading">
            @SubTitle
        </p>
        <div class="wizard-steps" @ref="_stepsElement">
            @foreach (var step in _steps)
            {
                <div class="wizard-step @(GetStepCompletedClass(step)) @(GetStepPositionClass(step))">
                    <div class="wizard-step-content">
                        @if (_steps.First() == step)
                        {
                            <div class="wizard-line background left"></div>
                            <div class="wizard-line progress left"></div>
                        }

                        <p class="wizard-step-number"><i class="@step.IconClass"></i></p>
                        <svg class="wizard-checkmark" viewBox="0 0 52 52">
                            <circle class="wizard-checkmark-circle" cx="26" cy="26" r="25" fill="none" />
                            <path class="wizard-checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                        </svg>

                        <div class="wizard-line background @GetLastClass(step)"></div>
                        <div class="wizard-line progress @GetLastClass(step)"></div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="wizard-panels" style="min-height: @GetMinHeight()">
        @foreach (var panel in _steps)
        {
            <div class="wizard-panel @(GetPanelClass(panel))">
                @panel.ChildContent
            </div>
        }
        <div class="wizard-panel @(GetCompletedPanelClass())">
            @Completed
        </div>
    </div>

    <div class="wizard-footer">
        <div class="wizard-steps-count">
            @GetStepCount()
        </div>
        <div class="wizard-buttons">
            <button class="button previous"
                    disabled="@GetPreviousDisabled()"
                    @onclick="Previous">
                Previous
            </button>
            <button class="button next"
                    disabled="@GetNextDisabled()"
                    @onclick="Next">
                @GetNextText()
            </button>
        </div>
    </div>
</div>

<CascadingValue Value="this">
    @Steps
</CascadingValue>

@code {

    [Parameter, EditorRequired]
    public required RenderFragment Steps { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment Completed { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? SubTitle { get; set; }

    [Parameter]
    public string? MinHeight { get; set; }

    [Parameter]
    public string? MaxWidth { get; set; }

    private List<WizardStep> _steps { get; set; } = new();
    private ElementReference _stepsElement;
    private int _currentStep = 0;
    private bool _isLoading;

    private string GetMinHeight() => string.IsNullOrEmpty(MinHeight) ? "auto" : MinHeight;

    private string GetMaxWidth() => string.IsNullOrEmpty(MaxWidth) ? "auto" : MaxWidth;

    private string? GetLastClass(WizardStep step) => _steps.Last() == step ? "right" : null;

    private string GetStepCount()
    {
        var totalSteps = _steps.Count;
        var currentStep = _currentStep + 1;
        var addsDynamicSteps = _steps.Any(step => !step.IsCompleted && step.AddsDynamicSteps);
        var suffix = addsDynamicSteps ? " (...)" : string.Empty;
        return $"Step {currentStep} of {totalSteps}{suffix}";
    }

    private string? GetStepCompletedClass(WizardStep step) => step.IsCompleted ? "completed" : null;

    private string? GetStepPositionClass(WizardStep step) => _steps.First() == step ? "first" : _steps.Last() == step ? "last" : null;

    private string? GetPanelClass(WizardStep step) => step.IsActive && !step.IsCompleted ? "moving-in" : step.MovementClass;

    private string? GetCompletedPanelClass() => _steps.All(x => x.IsCompleted) ? "moving-in" : "moving-out-forward";

    private bool GetPreviousDisabled()
    {
        if (_isLoading || _currentStep < 1) return true;
        var step = _steps[_currentStep];
        return step.IsCompleted || step.EnablePrevious is false;
    }

    private bool GetNextDisabled() => _isLoading || _steps.All(x => x.IsCompleted);

    private string GetNextText() => _isLoading ? "Loading..." : "Next";

    private bool HasNextStep() => _currentStep < _steps.Count - 1;

    public void AddStep(WizardStep step, int? position = null)
    {
        if (position is not null && position >= 0 && position < _steps.Count && _steps[position.Value].IsCompleted is false)
        {
            _steps.Insert(position.Value, step);
        }
        else
        {
            _steps.Add(step);
        }
        UpdateSteps();
        StateHasChanged();
    }

    public void RemoveStep(WizardStep step)
    {
        _steps.Remove(step);
        UpdateSteps();
        StateHasChanged();
    }

    private async Task Next()
    {
        var onNext = _steps[_currentStep].OnNext;
        if (onNext is not null)
        {
            _isLoading = true;
            var success = await onNext.Invoke();
            _isLoading = false;
            if (success is false)
            {
                return;
            }
        }
        if (_steps[_currentStep].AddsDynamicSteps)
        {
            await Task.Yield();
        }
        _steps[_currentStep].IsCompleted = true;
        if (HasNextStep())
        {
            _currentStep++;
        }
        UpdateSteps();
        await HandleScrolls();
    }

    private async Task Previous()
    {
        if (_currentStep > 0)
        {
            _currentStep--;
            _steps[_currentStep].IsCompleted = false;
            UpdateSteps();
            await HandleScrolls();
        }
    }

    private void UpdateSteps()
    {
        for (int i = 0; i < _steps.Count; i++)
        {
            _steps[i].IsActive = i == _currentStep;
            _steps[i].MovementClass = i <= _currentStep ? "moving-out-backward" : i > _currentStep ? "moving-out-forward" : null;
        }
    }

    protected override void OnInitialized()
    {
        UpdateSteps();
    }

    private async Task HandleScrolls()
    {
        try
        {
            await ScrollToCurrentStepIcon();

            // It helps prevent a race condition the first time, provoking that the scroll is not done.
            // 200 would be enough, but 300 is safer.
            // Awaiting the delay before the scroll icon does not work.
            await Task.Delay(300);

            await ScrollToCurrentStepContent();
        }
        catch
        {
        }
    }

    private async Task ScrollToCurrentStepIcon()
    {
        var stepsToWait = 3;
        if (_currentStep <= stepsToWait) return;
        var pxsToScroll = (_currentStep - stepsToWait) * 70;
        await JS.InvokeVoidAsync("scrollLeft", _stepsElement, pxsToScroll);
    }

    private async Task ScrollToCurrentStepContent()
    {
        var isInViewport = await JS.InvokeAsync<bool>("isElementInViewport", _stepsElement);
        if (!isInViewport)
            await JS.InvokeVoidAsync("scrollToElementStart", _stepsElement);
    }
}
